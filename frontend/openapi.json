{"openapi": "3.0.2", "info": {"title": "backend", "description": "Backend API for gamewiki", "version": "0.1.0"}, "paths": {"/api/health/": {"get": {"tags": ["health"], "summary": "Health Check", "description": "Checks the health of a project.\n\nIt returns 200 if the project is healthy.", "operationId": "health_check", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/auth/access-token": {"post": {"tags": ["auth"], "summary": "Login Access Token", "description": "Returns access token if valid username and password are provided.\n\nArgs:\n    user_dao (UserDAO): User DAO.\n    form_data (OAuth2PasswordRequestForm): User credentials.\n\nRaises:\n    HTTPException: User not found or password is invalid.\n    HTTPException: User is not active.", "operationId": "login_access_token", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_auth-login_access_token"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Token"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/auth/test-token": {"post": {"tags": ["auth"], "summary": "Token Test", "description": "Returns current user if valid access token is provided\n\nArgs:\n    current_user (User): Current user.\n\nReturns:\n    User: Current user.", "operationId": "token_test", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/backups/": {"get": {"tags": ["backups"], "summary": "Get Multi", "description": "Get list of backups.\n\nArgs:\n    response (Response): Response.\n    queries (BackupQueries, optional): Query parameters.\n    sort (list[str], optional): Order parameters.\n    backup_dao (BackupDAO, optional): Backup DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    list[Backup]: List of backups.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Backups-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/Backup"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["backups"], "summary": "Create", "description": "Creates backup of database and uploads it to Cloudinary.\n\nArgs:\n    background_tasks (BackgroundTasks): Background tasks.\n    backup_dao (BackupDAO, optional): Backup DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    Backup: Backup.", "operationId": "create", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["backups"], "summary": "Delete Multi", "description": "Delete backups.\n\nArgs:\n    background_tasks (BackgroundTasks): Background tasks.\n    backup_ids (list[UUID]): List of backup ids.\n    backup_dao (BackupDAO, optional): Backup DAO.\n    current_superuser (User, optional): Current superuser.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "Backup Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/backups/restore/{backup_id}": {"post": {"tags": ["backups"], "summary": "Restore", "description": "Restores database from backup.\n\nArgs:\n    backup_id (UUID): Backup id.\n    background_tasks (BackgroundTasks): Background tasks.\n    backup_dao (BackupDAO, optional): Backup DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    Backup: Backup.", "operationId": "restore", "parameters": [{"required": true, "schema": {"title": "Backup Id", "type": "string", "format": "uuid"}, "name": "backup_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/backups/{backup_id}": {"delete": {"tags": ["backups"], "summary": "Delete", "description": "Delete backups.\n\nArgs:\n    background_tasks (BackgroundTasks): Background tasks.\n    backup_id (UUID): Backup id.\n    backup_dao (BackupDAO, optional): Backup DAO.\n    current_superuser (User, optional): Current superuser.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "Backup Id", "type": "string", "format": "uuid"}, "name": "backup_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/users/": {"get": {"tags": ["users"], "summary": "Get Multi", "description": "Get list of users.\n\nArgs:\n    response (Response): Response.\n    queries (UserQueries, optional): User queries.\n    sort (list[str], optional): Order parameters.\n    user_dao (UserDAO, optional): User DAO.\n\nReturns:\n    list[User]: List of users.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Username", "pattern": "^\\w+$", "type": "string"}, "name": "username", "in": "query"}, {"required": false, "schema": {"title": "Email", "pattern": "^[\\w\\.\\-@]+$", "type": "string"}, "name": "email", "in": "query"}, {"required": false, "schema": {"title": "Is Superuser", "type": "boolean"}, "name": "is_superuser", "in": "query"}, {"required": false, "schema": {"title": "Is Primary", "type": "boolean"}, "name": "is_primary", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Users-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/User"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["users"], "summary": "Create", "description": "Create new user.\n\nArgs:\n    user (UserCreate): User data.\n    user_dao (UserDAO, optional): User DAO.\n\nRaises:\n    HTTPException: User already exists.\n\nReturns:\n    User: User.", "operationId": "create", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["users"], "summary": "Delete Multi", "description": "Delete users.\n\nArgs:\n    user_ids (list[UUID]): User IDs.\n    user_dao (UserDAO, optional): User DAO.\n    current_user (User, optional): Current user.\n\nRaises:\n    HTTPException: You are not allowed to delete users.\n\nReturns:\n    None: None.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "User Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/users/me": {"get": {"tags": ["users"], "summary": "Get Me", "description": "Get current user.\n\nArgs:\n    current_user (User, optional): Current user.\n\nReturns:\n    User: Current user.", "operationId": "get_me", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/users/{user_id}": {"get": {"tags": ["users"], "summary": "Get", "description": "Get user by id.\n\nArgs:\n    user_id (UUID): User ID.\n    user_dao (UserDAO, optional): User DAO.\n\nReturns:\n    User: User.", "operationId": "get", "parameters": [{"required": true, "schema": {"title": "User Id", "type": "string", "format": "uuid"}, "name": "user_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["users"], "summary": "Delete", "description": "Delete user.\n\nArgs:\n    user_id (UUID): User ID.\n    user_dao (UserDAO, optional): User DAO.\n    current_user (User, optional): Current user.\n\nRaises:\n    HTTPException: You are not allowed to delete this user.\n    HTTPException: User not found.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "User Id", "type": "string", "format": "uuid"}, "name": "user_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["users"], "summary": "Update", "description": "Update user.\n\nArgs:\n    user_id (UUID): User ID.\n    user (UserSchemaUpdate): User data.\n    user_dao (UserDAO, optional): User DAO.\n    current_user (User, optional): Current user.\n\nRaises:\n    HTTPException: You are not allowed to update this user.\n    HTTPException: User not found.\n    HTTPException: Username or email already exists.\n\nReturns:\n    User: User.", "operationId": "update", "parameters": [{"required": true, "schema": {"title": "User Id", "type": "string", "format": "uuid"}, "name": "user_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/companies/": {"get": {"tags": ["companies"], "summary": "Get Multi", "description": "Get list of companies.\n\nArgs:\n    response (Response): Response.\n    queries (CompanyQueries, optional): Query parameters.\n    sort (list[str], optional): Order parameters.\n    company_dao (CompanyDAO, optional): Company DAO.\n\nReturns:\n    list[Company]: List of companies.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Title", "type": "string"}, "name": "title", "in": "query"}, {"required": false, "schema": {"title": "Created By User", "pattern": "^\\w+$", "type": "string"}, "name": "created_by_user", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Companies-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/Company"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["companies"], "summary": "Create", "description": "Create company.\n\nArgs:\n    company (CompanyCreate): Company data.\n    company_dao (CompanyDAO, optional): Company DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    Company: Company.", "operationId": "create", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CompanyCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Company"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["companies"], "summary": "Delete Multi", "description": "Delete companies.\n\nArgs:\n    company_ids (list[UUID]): Company ids.\n    company_dao (CompanyDAO, optional): Company DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "Company Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/companies/{company_id}": {"get": {"tags": ["companies"], "summary": "Get", "description": "Get company by id.\n\nArgs:\n    company_id (UUID): Company id.\n    company_dao (CompanyDAO, optional): Company DAO.\n\nReturns:\n    Company: Company.", "operationId": "get", "parameters": [{"required": true, "schema": {"title": "Company Id", "type": "string", "format": "uuid"}, "name": "company_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Company"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["companies"], "summary": "Delete", "description": "Delete company.\n\nArgs:\n    company_id (UUID): Company id.\n    company_dao (CompanyDAO, optional): Company DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "Company Id", "type": "string", "format": "uuid"}, "name": "company_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["companies"], "summary": "Update", "description": "Update company.\n\nArgs:\n    company_id (UUID): Company id.\n    company (CompanyUpdate): Company data.\n    company_dao (CompanyDAO, optional): Company DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    Company: Company.", "operationId": "update", "parameters": [{"required": true, "schema": {"title": "Company Id", "type": "string", "format": "uuid"}, "name": "company_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/CompanyUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Company"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/platforms/": {"get": {"tags": ["platforms"], "summary": "Get Multi", "description": "Get list of platforms.\n\nArgs:\n    response (Response): Response.\n    queries (schema.PlatformQueries): Query parameters.\n    sort (list[str], optional): Order parameters.\n    platform_dao (PlatformDAO): Platform DAO.\n\nReturns:\n    list[Platform]: List of platforms.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Title", "type": "string"}, "name": "title", "in": "query"}, {"required": false, "schema": {"title": "Created By User", "pattern": "^\\w+$", "type": "string"}, "name": "created_by_user", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Platforms-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/Platform"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["platforms"], "summary": "Create", "description": "Create platform.\n\nArgs:\n    platform (schema.PlatformCreate): Platform data.\n    platform_dao (PlatformDAO): Platform DAO.\n    current_superuser (models.User): Current superuser.\n\nReturns:\n    Platform: Platform.", "operationId": "create", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PlatformCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Platform"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["platforms"], "summary": "Delete Multi", "description": "Delete platforms.\n\nArgs:\n    platform_ids (list[UUID]): Platform ids.\n    platform_dao (CompanyDAO, optional): Platform DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "Platform Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/platforms/{platform_id}": {"get": {"tags": ["platforms"], "summary": "Get", "description": "Get platform by ID.\n\nArgs:\n    platform_id (UUID): Platform ID.\n    platform_dao (PlatformDAO): Platform DAO.\n\nReturns:\n    Platform: Platform.", "operationId": "get", "parameters": [{"required": true, "schema": {"title": "Platform Id", "type": "string", "format": "uuid"}, "name": "platform_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Platform"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["platforms"], "summary": "Delete", "description": "Delete platform.\n\nArgs:\n    platform_id (UUID): Platform id.\n    platform_dao (CompanyDAO, optional): Platform DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "Platform Id", "type": "string", "format": "uuid"}, "name": "platform_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["platforms"], "summary": "Update", "description": "Update platform.\n\nArgs:\n    platform_id (UUID): Platform id.\n    platform (CompanyUpdate): Platform data.\n    platform_dao (CompanyDAO, optional): Platform DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    Platform: Platform.", "operationId": "update", "parameters": [{"required": true, "schema": {"title": "Platform Id", "type": "string", "format": "uuid"}, "name": "platform_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PlatformUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Platform"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/genres/": {"get": {"tags": ["genres"], "summary": "Get Multi", "description": "Get list of genres.\n\nArgs:\n    response (Response): Response.\n    queries (GenreQueries, optional): Query parameters.\n    sort (list[str], optional): Order parameters.\n    genre_dao (GenreDAO, optional): Genre DAO.\n\nReturns:\n    list[Genre]: List of genres.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Title", "type": "string"}, "name": "title", "in": "query"}, {"required": false, "schema": {"title": "Created By User", "pattern": "^\\w+$", "type": "string"}, "name": "created_by_user", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Genres-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/Genre"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["genres"], "summary": "Create", "description": "Create genre.\n\nArgs:\n    genre (GenreCreate): Genre data.\n    genre_dao (GenreDAO, optional): Genre DAO.\n    current_superuser (models.User, optional): Current superuser.\n\nReturns:\n    Genre: Genre.", "operationId": "create", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenreCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Genre"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["genres"], "summary": "Delete Multi", "description": "Delete multiple genres.\n\nArgs:\n    genre_ids (list[UUID]): Genre ids.\n    genre_dao (GenreDAO, optional): Genre DAO.\n    current_superuser (models.User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "Genre Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/genres/{genre_id}": {"get": {"tags": ["genres"], "summary": "Get", "description": "Get genre by id.\n\nArgs:\n    genre_id (UUID): Genre id.\n    genre_dao (GenreDAO, optional): Genre DAO.\n\nReturns:\n    Genre: Genre.", "operationId": "get", "parameters": [{"required": true, "schema": {"title": "Genre Id", "type": "string", "format": "uuid"}, "name": "genre_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Genre"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["genres"], "summary": "Delete", "description": "Delete genre.\n\nArgs:\n    genre_id (UUID): Genre id.\n    genre_dao (GenreDAO, optional): Genre DAO.\n    current_superuser (models.User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "Genre Id", "type": "string", "format": "uuid"}, "name": "genre_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["genres"], "summary": "Update", "description": "Update genre.\n\nArgs:\n    genre_id (UUID): Genre id.\n    genre (GenreUpdate): Genre data.\n    genre_dao (GenreDAO, optional): Genre DAO.\n    current_superuser (models.User, optional): Current superuser.\n\nReturns:\n    Genre: Genre.", "operationId": "update", "parameters": [{"required": true, "schema": {"title": "Genre Id", "type": "string", "format": "uuid"}, "name": "genre_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GenreUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Genre"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/games/": {"get": {"tags": ["games"], "summary": "Get Multi", "description": "Get list of games.\n\nArgs:\n    response (Response): Response.\n    queries (schema.GameQueries): Query parameters.\n    sort (list[str], optional): Order parameters.\n    game_dao (GameDAO): Game DAO.\n\nReturns:\n    list[Game]: List of games.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Title", "type": "string"}, "name": "title", "in": "query"}, {"required": false, "schema": {"title": "Created By User", "pattern": "^\\w+$", "type": "string"}, "name": "created_by_user", "in": "query"}, {"required": false, "schema": {"title": "Created By Company", "type": "string"}, "name": "created_by_company", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Games-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/Game"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["games"], "summary": "Create", "description": "Create game.\n\nArgs:\n    game (schema.GameCreate): Game data.\n    game_dao (GameDAO): Game DAO.\n    current_superuser (models.User): Current superuser.\n\nReturns:\n    Game: Game.", "operationId": "create", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GameCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Game"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["games"], "summary": "Delete Multi", "description": "Delete games.\n\nArgs:\n    game_ids (list[UUID]): Game IDs.\n    game_dao (GameDAO): Game DAO.\n    current_superuser (models.User): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "Game Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/games/{game_id}": {"get": {"tags": ["games"], "summary": "Get", "description": "Get game by ID.\n\nArgs:\n    game_id (UUID): Game ID.\n    game_dao (GameDAO): Game DAO.\n\nReturns:\n    Game: Game.", "operationId": "get", "parameters": [{"required": true, "schema": {"title": "Game Id", "type": "string", "format": "uuid"}, "name": "game_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Game"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["games"], "summary": "Delete", "description": "Delete game.\n\nArgs:\n    game_id (UUID): Game ID.\n    game_dao (GameDAO): Game DAO.\n    current_superuser (models.User): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "Game Id", "type": "string", "format": "uuid"}, "name": "game_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["games"], "summary": "Update", "description": "Update game.\n\nArgs:\n    game_id (UUID): Game ID.\n    game (schema.GameUpdate): Game data.\n    game_dao (GameDAO): Game DAO.\n    current_superuser (models.User): Current superuser.\n\nReturns:\n    Game: Game.", "operationId": "update", "parameters": [{"required": true, "schema": {"title": "Game Id", "type": "string", "format": "uuid"}, "name": "game_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/GameUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Game"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/sales/": {"get": {"tags": ["sales"], "summary": "Get Multi", "description": "Get list of sales.\n\nArgs:\n    response (Response): Response.\n    queries (SaleQueries, optional): Sale queries.\n    sort (list[str], optional): Order parameters.\n    sale_dao (SaleDAO, optional): Sale DAO.\n\nReturns:\n    list[Sale]: List of sales.", "operationId": "get_multi", "parameters": [{"required": false, "schema": {"title": "Skip", "minimum": 0.0, "type": "integer", "default": 0}, "name": "skip", "in": "query"}, {"required": false, "schema": {"title": "Limit", "minimum": 1.0, "type": "integer", "default": 100}, "name": "limit", "in": "query"}, {"required": false, "schema": {"title": "Game", "type": "string"}, "name": "game", "in": "query"}, {"required": false, "schema": {"title": "Platform", "type": "string"}, "name": "platform", "in": "query"}, {"required": false, "schema": {"title": "Created By User", "pattern": "^\\w+$", "type": "string"}, "name": "created_by_user", "in": "query"}, {"required": false, "schema": {"title": "Sort", "type": "string"}, "name": "sort", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"title": "Response Sales-Get Multi", "type": "array", "items": {"$ref": "#/components/schemas/Sale"}}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["sales"], "summary": "Create", "description": "Create a new sale\n\nArgs:\n    sale (SaleCreate): Sale data.\n    sale_dao (SaleDAO): Sale DAO.\n    current_superuser (User): Current superuser.\n\nReturns:\n    Sale: A new sale.", "operationId": "create", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SaleCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sale"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "delete": {"tags": ["sales"], "summary": "Delete Multi", "description": "Delete multiple companies.\n\nArgs:\n    sale_ids (list[UUID]): Sale ids.\n    sale_dao (SaleDAO, optional): Sale DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete_multi", "requestBody": {"content": {"application/json": {"schema": {"title": "Sale Ids", "type": "array", "items": {"type": "string", "format": "uuid"}}}}, "required": true}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/sales/{sale_id}": {"get": {"tags": ["sales"], "summary": "Get", "description": "Get sale by id.\n\nArgs:\n    sale_id (UUID): Sale ID.\n    sale_dao (SaleDAO): SaleDAO\n\nReturns:\n    Sale: Sale", "operationId": "get", "parameters": [{"required": true, "schema": {"title": "Sale Id", "type": "string", "format": "uuid"}, "name": "sale_id", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sale"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["sales"], "summary": "Delete", "description": "Delete company.\n\nArgs:\n    sale_id (UUID): Sale id.\n    sale_dao (CompanyDAO, optional): Sale DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    None: None.", "operationId": "delete", "parameters": [{"required": true, "schema": {"title": "Sale Id", "type": "string", "format": "uuid"}, "name": "sale_id", "in": "path"}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "patch": {"tags": ["sales"], "summary": "Update", "description": "Update sale.\n\nArgs:\n    sale_id (UUID): Sale id.\n    sale (SaleUpdate): Sale data.\n    sale_dao (SaleDAO, optional): Sale DAO.\n    current_superuser (User, optional): Current superuser.\n\nReturns:\n    Sale: Sale.", "operationId": "update", "parameters": [{"required": true, "schema": {"title": "Sale Id", "type": "string", "format": "uuid"}, "name": "sale_id", "in": "path"}], "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SaleUpdate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Sale"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}}, "components": {"schemas": {"Backup": {"title": "Backup", "required": ["id", "title", "url", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "url": {"title": "Url", "maxLength": 65536, "minLength": 1, "type": "string", "format": "uri"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}, "created_by_user": {"$ref": "#/components/schemas/UserInDB"}}}, "BackupInDB": {"title": "BackupInDB", "required": ["id", "title", "url", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "url": {"title": "Url", "maxLength": 65536, "minLength": 1, "type": "string", "format": "uri"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}}}, "Body_auth-login_access_token": {"title": "Body_auth-login_access_token", "required": ["username", "password"], "type": "object", "properties": {"grant_type": {"title": "Grant Type", "pattern": "password", "type": "string"}, "username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}, "scope": {"title": "Scope", "type": "string", "default": ""}, "client_id": {"title": "Client Id", "type": "string"}, "client_secret": {"title": "Client Secret", "type": "string"}}}, "Company": {"title": "Company", "required": ["id", "title", "founded_at", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "founded_at": {"title": "Founded At", "type": "string", "format": "date"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}, "created_by_user": {"$ref": "#/components/schemas/UserInDB"}, "games": {"title": "Games", "type": "array", "items": {"$ref": "#/components/schemas/GameInDB"}, "default": []}}}, "CompanyCreate": {"title": "CompanyCreate", "required": ["title", "founded_at"], "type": "object", "properties": {"title": {"title": "Title", "type": "string"}, "founded_at": {"title": "Founded At", "type": "string", "format": "date"}}}, "CompanyInDB": {"title": "CompanyInDB", "required": ["id", "title", "founded_at", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "founded_at": {"title": "Founded At", "type": "string", "format": "date"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}}}, "CompanyUpdate": {"title": "CompanyUpdate", "type": "object", "properties": {"title": {"title": "Title", "type": "string"}, "founded_at": {"title": "Founded At", "type": "string", "format": "date"}}}, "Game": {"title": "Game", "required": ["id", "title", "released_at", "created_at", "created_by_company"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "released_at": {"title": "Released At", "type": "string", "format": "date"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}, "created_by_company": {"$ref": "#/components/schemas/CompanyInDB"}, "created_by_user": {"$ref": "#/components/schemas/UserInDB"}, "genres": {"title": "Genres", "type": "array", "items": {"$ref": "#/components/schemas/GenreInDB"}, "default": []}, "platforms": {"title": "Platforms", "type": "array", "items": {"$ref": "#/components/schemas/PlatformInDB"}, "default": []}, "sales": {"title": "Sales", "type": "array", "items": {"$ref": "#/components/schemas/Sale"}, "default": []}}}, "GameCreate": {"title": "GameCreate", "required": ["title", "released_at", "created_by_company_id"], "type": "object", "properties": {"title": {"title": "Title", "type": "string"}, "released_at": {"title": "Released At", "type": "string", "format": "date"}, "platforms": {"title": "Platforms", "uniqueItems": true, "type": "array", "items": {"type": "string", "format": "uuid"}}, "genres": {"title": "Genres", "uniqueItems": true, "type": "array", "items": {"type": "string", "format": "uuid"}}, "created_by_company_id": {"title": "Created By Company Id", "type": "string", "format": "uuid"}}}, "GameInDB": {"title": "GameInDB", "required": ["id", "title", "released_at", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "released_at": {"title": "Released At", "type": "string", "format": "date"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}}}, "GameUpdate": {"title": "GameUpdate", "type": "object", "properties": {"title": {"title": "Title", "type": "string"}, "released_at": {"title": "Released At", "type": "string", "format": "date"}, "platforms": {"title": "Platforms", "uniqueItems": true, "type": "array", "items": {"type": "string", "format": "uuid"}}, "genres": {"title": "Genres", "uniqueItems": true, "type": "array", "items": {"type": "string", "format": "uuid"}}, "created_by_company_id": {"title": "Created By Company Id", "type": "string", "format": "uuid"}}}, "Genre": {"title": "Genre", "required": ["id", "title"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "created_by_user": {"$ref": "#/components/schemas/UserInDB"}, "games": {"title": "Games", "type": "array", "items": {"$ref": "#/components/schemas/GameInDB"}, "default": []}}}, "GenreCreate": {"title": "GenreCreate", "required": ["title"], "type": "object", "properties": {"title": {"title": "Title", "type": "string"}}}, "GenreInDB": {"title": "GenreInDB", "required": ["id", "title"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}}}, "GenreUpdate": {"title": "GenreUpdate", "type": "object", "properties": {"title": {"title": "Title", "type": "string"}}}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "Platform": {"title": "Platform", "required": ["id", "title"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}, "created_by_user": {"$ref": "#/components/schemas/UserInDB"}, "games": {"title": "Games", "type": "array", "items": {"$ref": "#/components/schemas/GameInDB"}, "default": []}, "sales": {"title": "Sales", "type": "array", "items": {"$ref": "#/components/schemas/Sale"}, "default": []}}}, "PlatformCreate": {"title": "PlatformCreate", "required": ["title"], "type": "object", "properties": {"title": {"title": "Title", "type": "string"}}}, "PlatformInDB": {"title": "PlatformInDB", "required": ["id", "title"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "title": {"title": "Title", "type": "string"}}}, "PlatformUpdate": {"title": "PlatformUpdate", "type": "object", "properties": {"title": {"title": "Title", "type": "string"}}}, "Sale": {"title": "Sale", "required": ["id", "amount", "game", "platform"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "amount": {"title": "Amount", "type": "integer"}, "game": {"$ref": "#/components/schemas/GameInDB"}, "platform": {"$ref": "#/components/schemas/PlatformInDB"}, "created_by_user": {"$ref": "#/components/schemas/UserInDB"}}}, "SaleCreate": {"title": "SaleCreate", "required": ["amount", "game_id", "platform_id"], "type": "object", "properties": {"amount": {"title": "Amount", "type": "integer"}, "game_id": {"title": "Game Id", "type": "string", "format": "uuid"}, "platform_id": {"title": "Platform Id", "type": "string", "format": "uuid"}}}, "SaleUpdate": {"title": "SaleUpdate", "type": "object", "properties": {"amount": {"title": "Amount", "type": "integer"}, "game_id": {"title": "Game Id", "type": "string", "format": "uuid"}, "platform_id": {"title": "Platform Id", "type": "string", "format": "uuid"}}}, "Token": {"title": "Token", "required": ["access_token", "token_type"], "type": "object", "properties": {"access_token": {"title": "Access Token", "type": "string"}, "token_type": {"title": "Token Type", "type": "string"}}}, "User": {"title": "User", "required": ["id", "username", "email", "is_superuser", "is_primary", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_superuser": {"title": "Is Superuser", "type": "boolean"}, "is_primary": {"title": "Is Primary", "type": "boolean"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}, "created_companies": {"title": "Created Companies", "type": "array", "items": {"$ref": "#/components/schemas/CompanyInDB"}, "default": []}, "created_platforms": {"title": "Created Platforms", "type": "array", "items": {"$ref": "#/components/schemas/PlatformInDB"}, "default": []}, "created_games": {"title": "Created Games", "type": "array", "items": {"$ref": "#/components/schemas/GameInDB"}, "default": []}, "created_genres": {"title": "Created Genres", "type": "array", "items": {"$ref": "#/components/schemas/GenreInDB"}, "default": []}, "created_sales": {"title": "Created Sales", "type": "array", "items": {"$ref": "#/components/schemas/Sale"}, "default": []}, "created_backups": {"title": "Created Backups", "type": "array", "items": {"$ref": "#/components/schemas/BackupInDB"}, "default": []}}}, "UserCreate": {"title": "UserCreate", "required": ["username", "email", "password"], "type": "object", "properties": {"username": {"title": "Username", "maxLength": 20, "minLength": 4, "pattern": "^\\w+$", "type": "string"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_superuser": {"title": "Is Superuser", "type": "boolean", "default": false}, "password": {"title": "Password", "minLength": 8, "type": "string"}}}, "UserInDB": {"title": "UserInDB", "required": ["id", "username", "email", "is_superuser", "is_primary", "created_at"], "type": "object", "properties": {"id": {"title": "Id", "type": "string", "format": "uuid"}, "username": {"title": "Username", "type": "string"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_superuser": {"title": "Is Superuser", "type": "boolean"}, "is_primary": {"title": "Is Primary", "type": "boolean"}, "created_at": {"title": "Created At", "type": "string", "format": "date-time"}}}, "UserUpdate": {"title": "UserUpdate", "type": "object", "properties": {"username": {"title": "Username", "maxLength": 20, "minLength": 4, "pattern": "^\\w+$", "type": "string"}, "email": {"title": "Email", "type": "string", "format": "email"}, "is_superuser": {"title": "Is Superuser", "type": "boolean", "default": false}, "password": {"title": "Password", "minLength": 8, "type": "string"}}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/api/auth/access-token"}}}}}}